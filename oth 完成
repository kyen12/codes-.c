/***************************************************************
 *                 プログラム othello                          *
 *  構造体とポインタを使ってオブジェクト指向風のプログラミング *
 ***************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h> /* usleep()のため */
#include <eggx.h>

/************
 *  macros  *
 ************/
#define ELEMENT_SIZE (100)
#define NUM_OF_ELEMENTS (8)
#define FIELD_SIZE (ELEMENT_SIZE * NUM_OF_ELEMENTS)
#define MESSAGE_SIZE (50) /* 盤面のメッセージ領域の高さ(pixel) */
#define MAX_MESSAGE (64) /* 盤面のメッセージ領域のメッセージ最大文字数 */
#define BIG_LOSS (3) /* 3倍以上相手が多ければ，大敗している */
#define ROTATE_DIRECTION (1) /* 右回り */

/* 色 */
#define BLACK (0)
#define WHITE (1)
#define GREEN (3)

/* 要素の状態 */
#define VACANT (0x00) /* 空き要素 */
#define WHITE_STONE (0x01) /* 白石が置かれた要素 */
#define BLACK_STONE (0x02) /* 黒石が置かれた要素 */
#define STONE_BITS (0x03) /* 石の色を示すビット */
#define BOUNDARY_BIT (0x04) /* 境界空白を示すビット */
#define STONE_INVERSION (STONE_BITS) /* XORで石の色を逆転させる */
#define NUM_OF_DIRECTIONS (8)
#define MAX_MARGINE (NUM_OF_ELEMENTS * NUM_OF_ELEMENTS)


/**************************
 *  structure definition  *
 **************************/
struct location {
  int row;	/* 行は下から始まり，0から7まで（Y方向）*/
  int column;	/* 列は左から始まり，0から7まで（X方向） */
};

struct element {
  struct location location; /* 要素の位置 */
  int status; /* 石の有無，石の色，境界となる空き要素か */
      /*
       * '0000' 境界でない空き要素
       * '0100' 境界の空き要素
       * '0001' 白石が置かれた要素
       * '0010' 黒石が置かれた要素
       */
};



/***************************
 *  prototype declaration  *
 ***************************/
int count_whiteStones(struct element [NUM_OF_ELEMENTS][NUM_OF_ELEMENTS]);
int display_situation(int, int, int);
int isBoundary(int);
int lookAround_directions(int, struct element [NUM_OF_ELEMENTS][NUM_OF_ELEMENTS], struct element *, int);
int canTurnOver(int, struct element [NUM_OF_ELEMENTS][NUM_OF_ELEMENTS], struct element *, int way, int);
int place_stone(int, struct element [NUM_OF_ELEMENTS][NUM_OF_ELEMENTS], struct element *, int);
struct element *get_adjacent(struct element [NUM_OF_ELEMENTS][NUM_OF_ELEMENTS], struct element *, int);
int initialize_element(int, struct element *);
int paint_element(int, struct element *, int);
int display_message(int, char *);
int doesAnyOtherPinch(int, struct element [NUM_OF_ELEMENTS][NUM_OF_ELEMENTS], struct element *, int);
int doesCandidatePinch(struct element [NUM_OF_ELEMENTS][NUM_OF_ELEMENTS], struct element *, int);
int isPinching(struct element [NUM_OF_ELEMENTS][NUM_OF_ELEMENTS], struct element *, int, int);

/***************
 *  functions  *
 ***************/
int
main()
{
    struct element mesh[NUM_OF_ELEMENTS][NUM_OF_ELEMENTS]; /* 盤面のメッシュ */
    int win; /* 描画用のWindow */
    int row, column, position;
    int stone;
    struct element *element;
    int availables; /* 空いているマスの数 */
    int white_stones; /* 白石の数 */
    int black_stones; /* 黒石の数 */
    char buffer[MAX_MESSAGE];

    win = gopen(FIELD_SIZE,FIELD_SIZE + MESSAGE_SIZE);
    layer(win, 0,1); /* 表示用レイヤを0に，書き込み用レイヤを1に設定．
			書き込み用レイヤにしか書かないことで描画を速くする */
    
    gsetbgcolor(win,"GREEN") ;
    gclr(win) ; /* 背景色を反映 */

    /* すべての要素を初期化 */
    for(row = 0; row < NUM_OF_ELEMENTS; row++) {
      for(column = 0; column < NUM_OF_ELEMENTS; column++) {
	element = mesh[row] + column;
	element->status = VACANT;
	element->location.row = row;
	element->location.column = column;
	initialize_element(win, element);
      }
    }

    /* 真ん中の４つの要素に白黒の石を置く */
    column = NUM_OF_ELEMENTS/2 - 1;
    row = NUM_OF_ELEMENTS/2 - 1;
    element = &mesh[row][column]; /* 左下 */
    place_stone(win,mesh,element,WHITE_STONE);

    column++;
    element = &mesh[row][column]; /* 右下 */
    place_stone(win,mesh,element,BLACK_STONE);

    row++;
    element = &mesh[row][column]; /* 右上 */
    place_stone(win,mesh,element,WHITE_STONE);

    column--;
    element = &mesh[row][column]; /* 左上 */
    place_stone(win,mesh,element,BLACK_STONE);

    availables = NUM_OF_ELEMENTS * NUM_OF_ELEMENTS - 4; /* ４個は置いたので引いておく */
    white_stones = 2;
    black_stones = 2;
    /* 戦況の表示 */
    display_situation(win, white_stones, black_stones); /* 盤面を再描画 */
      
    
    /* プレーヤの対戦 */
    stone = BLACK_STONE;
    while(availables > 0) {
      if(stone == BLACK_STONE)
	printf("次は黒です．");
      else
	printf("次は白です．");
      printf("どこに置きますか? ");
      fgets(buffer, MAX_MESSAGE - 1, stdin);
      position = atoi(buffer);
      row = position / 10;
      column = position % 10;
      if((row < 0) || (row > NUM_OF_ELEMENTS -1) ||
	 (column < 0) || (column > NUM_OF_ELEMENTS - 1)) { /* 入力ミスを弾く */
	printf("そのようなマスはありません．\n");
	continue;
      }

      element = &mesh[row][column];  /* プレーヤが石を置こうとしている要素 */
      /* この要素は，空白で，かつ，境界（まわりに石が置かれている）か */
      if(isBoundary(element->status) == 0) {
	printf("ここには置けません．\n"); /* 離島は作れない */
	continue;
      }
     
      /* パスを行う */
      /* 候補要素がない（0）かつすべての候補要素が相手を挟んんでいない時（0） */
      if(doesAnyOtherPinch(win, mesh, element, stone) == 0){
	if(doesCandidatePinch(mesh, element, stone) == 0) {
	  printf("置けるマスがないのでパスします．\n");
	  stone ^= STONE_INVERSION;
	  continue;
	}
      }

      /* 他に置くことが出来るマスが存在するとき */
      /* すべての後歩容そが相手を挟んでいない時（0） */
      if(doesCandidatePinch(mesh, element, stone) == 0) {
	printf("この位置には置けません．他に得点できるマスがあります．\n");
	continue;
      }
      
      /* 指定された位置に指定された色の石を置く */
      place_stone(win,mesh,element,stone); /* この要素に石を置く */
      availables--; /* 空白を１つ減らす */
      
      /* プレーヤが置いた石が相手の石を挟んでいるか */
      /* この石の回りのうち，相手の石があるすべての方向で，挟めているかを調べる */
      /* 挟めていれば，挟んだ相手の石を自分の石に変更 */
      lookAround_directions(win, mesh, element, stone);

      /* 戦況を把握 */
      white_stones = count_whiteStones(mesh);
      black_stones = NUM_OF_ELEMENTS * NUM_OF_ELEMENTS - availables - white_stones;
      /* 戦況の表示 */
      display_situation(win, white_stones, black_stones);  /* 盤面を再描画 */

      if(white_stones==0){
	printf("黒の勝ちです．\n");
	break;
      }
      if(black_stones==0){
       printf("白の勝ちです．\n");
       break;
      }
      
      stone ^= STONE_INVERSION; /* 白黒反転 */
    }
    /* 結果を表示 */
    printf("黒は%d,白は%dで",black_stones, white_stones);
    if(black_stones == white_stones){
      printf("引き分けです.\n");
    }else if(black_stones<white_stones){
      printf("白の勝ちです.\n");
   }else{
      printf("黒の勝ちです.\n");
    }
    
    printf("終了です．盤面を消します[OK]");
    fgets(buffer, MAX_MESSAGE -1, stdin);
    
    gclose(win);
    return 0;
}

/*--------------*
 |  論理レベル  |
 *--------------*/
/*******************************
 *  盤面上の白石の数をカウント *
 *******************************/
int
count_whiteStones(struct element mesh[NUM_OF_ELEMENTS][NUM_OF_ELEMENTS])
{
  int count = 0;
  int i, j;

  for(i = 0; i < NUM_OF_ELEMENTS; i++)
    for(j = 0; j < NUM_OF_ELEMENTS; j++)
      if(mesh[i][j].status & WHITE_STONE)
	count++;
  return count;
}

/***********************
 *  盤面上の戦況を表示 *
 ***********************/
int
display_situation(int win, int white, int black)
{
  char message[MAX_MESSAGE * 2]; /* メッセージを書き込む領域は大きめに取っておく */
  char situation[MAX_MESSAGE]; /* 対戦状況 */
  char *former_cheering = "Good luck, "; /* 前半の応援メッセージ */
  char *latter_cheering = "! You can still win."; /* 後半の応援メッセージ */
  int i, j;
  char *top; /* 応援メッセージの先頭 */
  char *tail; /* 応援メッセージの最後 */
  char *loser; /* 負けているプレーヤ */
  int length; /* 対戦状況と応援メッセージの全体の長さ */

  sprintf(situation, "white: %d,   black: %d   ", white, black);
  strcpy(message, situation);
  display_message(win, message); /* ここで盤面を再描画 */

  if(white * BIG_LOSS < black)  loser = "White";
  else if(black * BIG_LOSS < white) loser = "Black";
  else loser = NULL;

  if(loser != NULL) { /* どちらかが大負けしているならテロップ表示 */
    for(i = 0; i < 20; i++) {
      sprintf(message, "%s", situation);
      top = message + strlen(situation);
      for(j = 0; j < i; j++) { /* 応援メッセージを右に1文字ずらす */
	strcat(top, " ");
	top++;
      }
      strcat(top, former_cheering);
      strcat(top, loser);
      strcat(top, latter_cheering);
      length = strlen(message);
      if(length >= MAX_MESSAGE) { /* バッファのサイズを超えたら */
	tail = message + MAX_MESSAGE - 1;
	*tail = '\0'; /* バッファのサイズ分だけを印字 */
      }
      display_message(win, message); /* ここで盤面を再描画 */
      usleep(100*1000); /* 100ミリ秒実行休止 */
    }
  }

  return 0;
}

/*************************************************
 *  石を置こうとしている要素は，空白でかつ境界か *
 *************************************************/
int
isBoundary(int status)
{
  if((status & STONE_BITS) > 0) {
    printf("そのマスには石が置かれています\n");
    return 0;
  } else if((status & BOUNDARY_BIT) == 0) {
    printf("離れたマスです\n");
    return 0;
  } else 
    return 1;
}

/*******************************************
 * elementに置かれた石の周りの方向を調べる *
 *******************************************/
int
lookAround_directions(int win, 
		      struct element mesh[NUM_OF_ELEMENTS][NUM_OF_ELEMENTS],
		      struct element *element,
		      int stone)
{
  int way;
  int adjacent_stone;
  struct element *adjacent;
  int result = 0;
  
  for(way = 0; way < NUM_OF_DIRECTIONS; way++) {
    
    adjacent = get_adjacent(mesh, element, way);
   if(adjacent == NULL) continue;
   
   adjacent_stone = adjacent->status & STONE_BITS;
   if(adjacent_stone == VACANT)
     continue;
   else if(adjacent_stone ^ stone) { 
     if(canTurnOver(win, mesh, adjacent, way, stone) == 1) {
       place_stone(win,mesh,adjacent, stone);
       result++;
     }
   }
  }
 return result;
}

/***********************************************
 * 指定された方向でelement上の石を獲得できるか *
 ***********************************************/
int
canTurnOver(int win, 
	    struct element mesh[NUM_OF_ELEMENTS][NUM_OF_ELEMENTS],
	    struct element *element,
	    int way,
	    int stone) /* この色の石で element にある石を挟む */
{
  struct element *adjacent; 
  
  adjacent = get_adjacent(mesh, element, way); 
  if(adjacent == NULL)
    return 0; 
  
  if((adjacent->status & STONE_BITS) == VACANT) { 
   return 0; 
  } else if((adjacent->status & STONE_BITS) == stone) {
    place_stone(win, mesh, element, stone);
    return 1;
  } else {
    if(canTurnOver(win, mesh, adjacent, way, stone)) {
      place_stone(win, mesh, element, stone);
      return 1;
   } else
      return 0;
  }
}


/******************************
 *  指定された要素に石を置く  *
 ******************************/
int
place_stone(int win,
	    struct element mesh[NUM_OF_ELEMENTS][NUM_OF_ELEMENTS],
	    struct element *element,
	    int stone)
{
  int way;
  struct element *adjacent;
  int color;
 
  element->status = stone;
  
  if(stone == WHITE_STONE)
    color = WHITE;
  else
    color = BLACK;
  paint_element(win, element, color);
  
  for(way = 0; way < NUM_OF_DIRECTIONS; way++) {
    adjacent = get_adjacent(mesh, element, way);
    if(adjacent == NULL) continue;
    
    if(adjacent->status == VACANT)
      adjacent->status = BOUNDARY_BIT;
  }
  
  return 0;
}

/******************************
 *  指定された要素の隣の要素  *
 ******************************/
struct element *
get_adjacent(struct element mesh[NUM_OF_ELEMENTS][NUM_OF_ELEMENTS],
	     struct element *element,
	     int way)
{
  struct element *adjacent;
  int row, column;
  int row_vector=0, column_vector=0;
  
 switch(way) {
 case 0: row_vector = 1; column_vector = 0; break;
 case 1: row_vector = 1; column_vector = 1; break;
 case 2: row_vector = 0; column_vector = 1; break;
 case 3: row_vector = -1; column_vector = 1; break;
 case 4: row_vector = -1; column_vector = 0;  break;
 case 5: row_vector = -1; column_vector = -1; break;
 case 6: row_vector = 0; column_vector = -1; break;
 case 7: row_vector = 1; column_vector = -1; break;
 default: break;
 }

 row = element->location.row + row_vector;
 column = element->location.column + column_vector;
 
 if((row < 0) || (row > NUM_OF_ELEMENTS - 1))
   return (struct element *)NULL;
 if((column < 0) || (column > NUM_OF_ELEMENTS - 1))
   return (struct element *)NULL;
 
 adjacent = mesh[row] + column;
 return adjacent;
}


/*--------------*
 |  物理レベル  |
 *--------------*/
/*****************
 *  要素を初期化 *
 *****************/
int initialize_element(int win, struct element *element)
{
  float x, y;
  float edge=0;
  int row = element->location.row;
  int column = element->location.column;

  x = column * (float)ELEMENT_SIZE; /* 要素の左下の座標 */
  y = row * (float)ELEMENT_SIZE;

  newpen(win, BLACK); /* 色を変える */
  edge = (float)ELEMENT_SIZE;
  drawrect(win,x,y, edge, edge); /* 正方形を描く */

  drawstr(win, x+1, y+1, 8, 0.0, "%d%d",row, column); /* 数字を描く */

  return 0;
}

/**********************************
 *  指定された要素の石に色を塗る  *
 **********************************/
int paint_element(int win, struct element *element, int color)
{
float x, y;
 float center_x=0, center_y=0;
 float edge=(float )ELEMENT_SIZE;
 float radian;
 float start_angle = 0.0;
 float end_angle = 0.0;
 int row = element->location.row;
 int column = element->location.column;

 x = column * (float)ELEMENT_SIZE;
 y = row * (float)ELEMENT_SIZE;

 newpen(win, color);
 center_x = x + edge/2.0; center_y = y + edge/2.0;
 radian = edge/2.0 - 1;
 start_angle = 0.0; end_angle = 360.0;
 fillarc(win, center_x, center_y, radian, radian,
	  start_angle, end_angle, ROTATE_DIRECTION);

 return 0;

}

/***************************
 *  盤面上のメッセージ表示 *
 ***************************/
int
display_message(int win,
		char *message)
{
  float x, y;

  x = 0; /* 盤面の左側 */
  y = (float)ELEMENT_SIZE * NUM_OF_ELEMENTS; /* 盤面の上側 */

  newpen(win, GREEN); /* 前の文字列を消す */
  fillrect(win, x, y, ELEMENT_SIZE * NUM_OF_ELEMENTS, MESSAGE_SIZE);

  newpen(win, BLACK); /* 色を変える */
  drawrect(win, x, y, ELEMENT_SIZE * NUM_OF_ELEMENTS, MESSAGE_SIZE);

  x += (float)ELEMENT_SIZE / 2;
  y += (float)MESSAGE_SIZE / 3;
  drawstr(win, x, y, 16, 0.0, "%s", message); /* メッセージを描く */

  copylayer(win, 1, 0); /* 書き込み用レイヤから表示用レイヤに一気にコピー
			   これで描画を速くする */

  return 0;
}

/**************************************************
 * 候補要素があればその要素が相手を挟んでいるのか判断する *
 **************************************************/
int
doesAnyOtherPinch(int win,
		  struct element mesh[NUM_OF_ELEMENTS][NUM_OF_ELEMENTS],
		  struct element *element,
		  int stone)
{
 int i, j;
 struct element *candidate;
 for(i = 0; i < NUM_OF_ELEMENTS; i++) {
   for(j = 0; j < NUM_OF_ELEMENTS; j++) {
     if((i == element->location.row) && (j == element->location.column))
	continue;
     candidate = &mesh[i][j];
     if(candidate->status & BOUNDARY_BIT) {
	if(doesCandidatePinch(mesh, candidate, stone) == 1)
	  return 1;
     }
   }
 }
 return 0;
}

/**********************************
 * 候補要素が相手の石を挟めるかを調べる *
 **********************************/
int
doesCandidatePinch(struct element mesh[NUM_OF_ELEMENTS][NUM_OF_ELEMENTS],
		   struct element *candidate, 
		   int stone)
{
 int way;
 int adjacent_stone;
 struct element *adjacent;

 for(way = 0; way < NUM_OF_DIRECTIONS; way++) {
   adjacent = get_adjacent(mesh, candidate, way);
   if(adjacent == NULL) continue;

   adjacent_stone = adjacent->status & STONE_BITS;
   if(adjacent_stone == VACANT)
     continue;
   if((adjacent->status & STONE_BITS) ^ stone) {
     if(isPinching(mesh, adjacent, way, stone) == 1) {
	return 1;
     }
   }
 }

 return 0;
}

/******************************************
 * 指定された方向で相手の石を挟んでいるかを調べる *
 ******************************************/
int
isPinching(struct element mesh[NUM_OF_ELEMENTS][NUM_OF_ELEMENTS],
	   struct element *element,
	   int way,
	   int stone)
{
 struct element *adjacent;

 adjacent = get_adjacent(mesh, element, way);
 if(adjacent == NULL)
   return 0;

 if((adjacent->status & STONE_BITS) == VACANT) {
   return 0;
 } else if((adjacent->status & STONE_BITS) == stone) {
   return 1;
 } else {
   return isPinching(mesh, adjacent, way, stone);
 }
}
